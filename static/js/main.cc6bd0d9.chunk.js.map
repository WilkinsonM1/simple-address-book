{"version":3,"sources":["components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","info","name","address","postcode","App","onSubmit","event","preventDefault","value","data","state","push","setState","this","type","placeholder","ref","input","map","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAwBeA,G,MArBF,SAACC,GACV,OACA,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,uBAAGA,UAAU,cAAa,wCAAoBD,EAAME,KAAKC,MACzD,uBAAGF,UAAU,aACT,2CAAuBD,EAAME,KAAKE,QAClC,6CAAyBJ,EAAME,KAAKG,eCwFzCC,E,YA3Fb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KAYRO,SAAW,SAAAC,GAETA,EAAMC,iBAEN,IAGMP,EAAO,CAACC,KAHD,EAAKA,KAAKO,MAGGN,QAFV,EAAKA,QAAQM,MAEeL,SAD3B,EAAKA,SAASK,OAGzBC,EAAO,EAAKC,MAAMD,KAExBA,EAAKE,KAAKX,GAEV,EAAKY,SAAS,CACZH,KAAMA,KAxBR,EAAKC,MAAQ,CACXD,KAAM,IAJS,E,sEA+BV,IAAD,OACN,OACE,yBAAKV,UAAU,aAEb,gDAEA,6BACA,yBAAKA,UAAU,OAEb,0BAAMA,UAAU,cAAcM,SAAUQ,KAAKR,UAC3C,2BACES,KAAK,OACLf,UAAU,oCACVgB,YAAY,OACZC,IAAM,SAAAC,GAAK,OAAI,EAAKhB,KAAOgB,KAE7B,yBAAKlB,UAAU,oCACb,2BACEe,KAAK,OACLf,UAAU,eACVgB,YAAY,UACZC,IAAM,SAAAC,GAAK,OAAI,EAAKf,QAAUe,KAK9B,2BACAH,KAAK,OACLf,UAAU,eACVgB,YAAY,YACZC,IAAM,SAAAC,GAAK,OAAI,EAAKd,SAAWc,MAMnC,4BAAQH,KAAK,SAASf,UAAU,mBAAhC,UAKJ,6BAGA,yBAAKA,UAAU,OAGXc,KAAKH,MAAMD,KAAKS,KAAI,SAAClB,EAAMmB,GAAP,OAAiB,kBAAC,EAAD,CAAMC,IAAKD,EAAOnB,KAAMA,a,GAjFvDqB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cc6bd0d9.chunk.js","sourcesContent":["import React from 'react'\n\n// functional component that will display a card with two lines name and address.\nconst Card = (props)=> {\n    return(\n    <div className=\"col-md-6 col-lg-3\">\n        <div className=\"card mb-3\">\n            <div className=\"card-body\">\n                <p className=\"card-title\"><span>Name: </span>{props.info.name}</p>\n                <p className=\"card-text\">\n                    <span>Address: </span>{props.info.address}\n                    <span>Post Code: </span>{props.info.postcode}\n\n                </p>\n\n            </div>\n\n        </div>\n\n    </div>\n    \n     ) }\n\n\nexport default Card;","import React, {Component} from 'react';\nimport './App.css';\n\nimport Card from './components/Card';\n\nclass App extends Component {\n  // we'll start with a constructor and make our state object inside this\n  // React docs recommend always passing props through constructor and super\n  constructor(props) {\n    super(props);\n    // state object will have 3 keys: name, address and postcode\n    this.state = {\n      data: []\n    }\n\n  }\n\n  // we need to make an onSubmit event handler which accepts \"event\" as an argument\n  // and which will be called when the \"Save\" button is clicked. \n  // we also will add event.preventDefault() to stop the button reloading the page after it is clicked\n\n  onSubmit = event => {\n    // prevent page reloading\n    event.preventDefault()  \n    // getting the name, address and postcode entered by user\n    const name = this.name.value\n    const address = this.address.value\n    const postcode = this.postcode.value\n    const info = {name: name, address: address, postcode:postcode};\n    // storing the state object data into data variable\n    const data = this.state.data\n    // pushing info object into data variable to change data object in state\n    data.push(info)\n\n    this.setState({\n      data: data\n    })\n  }\n\n  render(){\n    return(\n      <div className=\"container\">\n        {/* title of my app */}\n        <h1>Address Book App</h1>\n        {/* line break with visible horizontal line */}\n        <hr/>\n        <div className=\"row\">\n          {/* form with 3 input fields for name, address, postcode as well as a submit button */}\n          <form className=\"form-inline\" onSubmit={this.onSubmit}>\n            <input \n              type=\"text\"\n              className=\"form-control mb-2 mr-sm-2 mb-sm-0\"\n              placeholder=\"Name\"\n              ref= {input => this.name = input}\n            />\n            <div className=\"input-group mb-2 mr-sm-2 mb-sm-0\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Address\" \n                ref= {input => this.address = input}\n\n              />\n              {/* the ref is a callback that is used to store a reference to the text input of the DOM element\n              within an instance of a variable */}\n                <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Post Code\" \n                ref= {input => this.postcode = input}\n\n              />\n\n            </div>\n            {/* submit button */}\n            <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n\n          </form>\n\n        </div>\n        <hr/>\n\n        {/* here we will be placing the card component which will display data from the state with a map function */}\n        <div className=\"row\">\n          {\n            // info is from the onSubmit handler\n            this.state.data.map((info, index) => <Card key={index} info={info} />)\n          }\n\n        </div>\n\n\n      </div>\n    )\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}